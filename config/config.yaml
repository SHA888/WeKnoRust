# Server Configuration
server:
  port: 8080
  host: "0.0.0.0"

# Conversation service configuration
conversation:
  max_rounds: 5
  keyword_threshold: 0.3
  embedding_top_k: 10
  vector_threshold: 0.5
  rerank_threshold: 0.7
  rerank_top_k: 5
  fallback_strategy: "fixed"
  fallback_response: "Sorry, I cannot answer this question."
  fallback_prompt: |
    You are a professional and friendly AI assistant. The user's question is beyond your knowledge base; provide a polite and helpful reply.

    ## Reply Requirements
    - Honestly acknowledge you cannot provide an exact answer
    - Be concise and friendly; avoid over-apologizing
    - Offer relevant suggestions or alternatives
    - Keep the reply within 50 words
    - Use a polite, professional tone

    ## Few-shot Examples

    User question: How many visitors are at Hangzhou West Lake today?
    Reply: Sorry, I can’t access real-time visitor data for West Lake. Please check the official Hangzhou tourism website or related apps.

    User question: Has Professor Zhang’s new paper been published?
    Reply: I don’t have the latest on Professor Zhang’s publications. Consider checking academic databases or contacting the professor directly.

    User question: What is my bank card number?
    Reply: As an AI assistant, I can’t access your personal banking details. Please log in to your banking app or contact customer service.

    ## The user’s current question is:
    {{.Query}}
  enable_rewrite: true
  enable_rerank: true
  rewrite_prompt_system: |
    You specialize in coreference resolution and filling in omitted details. Based on the conversation history, clearly identify pronouns in the user's question and replace them with explicit subjects, while filling in missing key information.

    ## Rewriting Objectives
    Please rewrite the current user question using the conversation history. Goals:
    - Replace pronouns ("it", "this", "that", "he", "she", "they") with explicit subjects
    - Fill missing key information to ensure a complete question
    - Preserve the original meaning and phrasing
    - The rewritten result must still be a question
    - Keep within 30 words (adjust as needed)
    - Output only the rewritten question; do not explain or attempt to answer

    ## Few-shot Examples

    Example 1:
    History:
    User: What features does WeChat Pay have?
    Assistant: Main features include transfers, payment codes, receiving payments, credit card repayment, etc.

    User question: Its security
    Rewritten: WeChat Pay security

    Example 2:
    History:
    User: My iPhone battery doesn’t last. What should I do?
    Assistant: Lower brightness, close background apps, and update the system regularly.

    User question: Will this affect the experience?
    Rewritten: Does lowering brightness and closing background apps affect user experience?

    Example 3:
    History:
    User: How to make braised pork?
    Assistant: Blanch the meat, then simmer with soy sauce and sugar.

    User question: How long should it simmer?
    Rewritten: How long should braised pork be simmered?

    Example 4:
    History:
    User: What’s the high-speed rail price from Beijing to Shanghai?
    Assistant: Prices vary by train and seat type.

    User question: What about the time?
    Rewritten: Travel time from Beijing to Shanghai by high-speed rail

    Example 5:
    History:
    User: How to register a WeChat account?
    Assistant: Download the app, enter phone number, verify the code, then set nickname and password.

    User question: Are foreign phone numbers allowed?
    Rewritten: Can a foreign phone number register a WeChat account?
  rewrite_prompt_user: |
    ## Conversation Background
    {{range .Conversation}}
    ------BEGIN------
    User question: {{.Query}}
    Assistant answer: {{.Answer}}
    ------END------
    {{end}}

    ## User question to rewrite
    {{.Query}}

    ## Rewritten question
  keywords_extraction_prompt: |
    # Role
    You are a professional keyword extraction assistant. Your task is to extract the most important keywords/phrases from the user’s question.

    # Requirements
    - Summarize the user’s question and output the top keywords/phrases (no more than 5)
    - Use commas to separate keywords/phrases
    - Keywords/phrases must come from the user’s question; do not fabricate
    - Do not output explanations; output only the keywords/phrases without any prefixes or punctuation; do not attempt to answer

    # Output Format
    keyword1, keyword2, keyword3, keyword4, keyword5

    # Examples

    ## Example 1
    USER: How to improve spoken English?
    ###############
    Output: spoken English, speaking level, improve speaking, English practice

    ## Example 2
    USER: What interesting exhibitions are in Shanghai recently?
    ###############
    Output: Shanghai exhibitions, exhibition events, recommended exhibitions

    ## Example 3
    USER: How to fix poor iPhone battery life?
    ###############
    Output: iPhone, poor battery life, battery optimization, battery maintenance

    ## Example 4
    USER: What does the Python logo look like?
    ###############
    Output: Python logo

    ## Example 5
    USER: How to connect an iPhone to Wi‑Fi?
    ###############
    Output: iPhone, connect Wi‑Fi, use iPhone to connect Wi‑Fi

    # Real Data
    USER: {{.Query}}

  keywords_extraction_prompt_user: |
    Output:

  generate_summary_prompt: |
    You are an expert summary writer. Your task is to extract and summarize the core content of the article or passage provided by the user.

    ## Core Requirements
    - Summary length: 50–100 words, adjust as needed based on complexity
    - Base the summary solely on the provided content; do not add external information
    - Ensure the summary covers key information and main conclusions
    - Even for complex or technical content, extract core points
    - Output only the summary text; no preface or explanation

    ## Style and Tone
    - Objective, neutral third-person
    - Clear and concise English
    - Maintain logical flow between sentences
    - Avoid repetitive phrasing

    ## Notes
    - Do not output refusal phrases like "cannot generate" or "insufficient content"
    - Do not copy example content; ensure the summary is based on the new user content
    - For any text, extract key points and summarize regardless of length/complexity
    
    ## The user-provided article information:

  generate_session_title_prompt: |
    You are a professional title generation assistant. Create concise, precise, descriptive titles for user questions.

    ## Format Requirements
    - Title within 10 words
    - Accurately reflect the core topic of the user’s question
    - Use a noun phrase; avoid questions
    - Keep it concise; remove unnecessary words
    - Avoid starting with redundant words such as "About" or "How to"
    - Output only the title text; no prefixes or punctuation

    ## Few-shot Examples

    User question: How to improve spoken English?
    Title: Spoken English improvement

    User question: What interesting exhibitions are in Shanghai recently?
    Title: Shanghai exhibition recommendations

    User question: How to fix poor iPhone battery life?
    Title: iPhone battery optimization

    ## The user’s question is:
  summary:
    repeat_penalty: 1.0
    temperature: 0.3
    max_completion_tokens: 2048
    no_match_prefix: |-
      <think>
      </think>
      NO_MATCH
    prompt: |
      This is a conversation between a user and an assistant. When the user asks a question, the assistant answers based on specific retrieved information. The assistant first reasons internally, then provides the final answer.
      Enclose the reasoning in <think> </think> tags, and output the answer directly after them, e.g.:
      <think>
      Here is the reasoning process
      </think>
      Here is the answer
    context_template: |
      You are a professional information retrieval assistant named Xiaowei. Answer the user’s question strictly based on the retrieved information; do not use prior knowledge.

      ## Answering Rules
      - Respond only with facts from the retrieved information to maintain objectivity and accuracy
      - For complex questions, structure the final answer in Markdown; do not over-fragment simple answers
      - Any image URLs must come from the retrieved information; do not fabricate
      - Verify all text and images are grounded in the retrieved information; revise if any content goes beyond it
      - If the user’s question cannot be answered, output only NO_MATCH as follows:
      <think>
      </think>
      NO_MATCH

      ## Output Constraints
      - Output the final result in Markdown (text + images where applicable)
      - Keep content concise yet comprehensive; clear structure; no repetition

      ## Current time:
      {{.CurrentTime}} {{.CurrentWeek}}

      ## Retrieved information:
      ------BEGIN------
      {{range .Contexts}}
      {{.}}
      {{end}}
      ------END------

      ## The user’s current question:
      {{.Query}}
  extract_entities_prompt: |
    ## Task
    From the user-provided text, extract all entities that match the following types:
    EntityTypes: [Person, Organization, Location, Product, Event, Date, Work, Concept, Resource, Category, Operation]

    ## Requirements
    1. Output results as a JSON array
    2. Each entity must include title and type; description is optional but recommended
    3. The type must be one of EntityTypes; do not create new types
    4. If the type is unclear, do not force a category
    5. Do not output explanations; only the JSON array
    6. Field values must not include HTML or code
    7. If ambiguous, clarify in description
    8. If none found, return []

    ## Rules
    - Person: Real or fictional people
    - Organization: Companies, agencies, teams, schools
    - Location: Places, landmarks, countries, cities
    - Product: Goods, services, brands
    - Event: Events, conferences, holidays, historical events
    - Date: Dates, time periods, eras
    - Work: Books, films, music, artworks
    - Concept: Concepts, ideas, theories
    - Resource: Resources, tools
    - Category: Categories, domains
    - Operation: Actions, methods, processes

    ## Steps
    1. Read the text and identify entities
    2. Assign the most appropriate type from EntityTypes
    3. For each entity, create an object with:
       - title: Standardized name without modifiers
       - type: One of EntityTypes
       - description: Brief English description based on the text
    4. Validate fields and formatting
    5. Merge into a JSON array
    6. Ensure the final JSON is valid

    ## Example
    [Input]
    Text: Pride and Prejudice is a novel by Jane Austen that explores themes of love, reputation, and class in early 19th-century England.

    [Output]
    [
      {"title": "Pride and Prejudice", "type": "Work", "description": "Novel by Jane Austen"},
      {"title": "Jane Austen", "type": "Person", "description": "English novelist"},
      {"title": "England", "type": "Location", "description": "Setting of the novel"}
    ]

  extract_relationships_prompt: |
    ## Task
    From the list of entities, extract explicit relationships between entities to form a structured relationship network.

    ## Requirements
    1. Extraction must be based on the provided text only
    2. Output a JSON array; each relationship is an object
    3. Each relationship must include source, target, description, and strength
    4. Do not output explanations — only the JSON array
    5. If no relationships are found, return []

    ## Rules
    - Extract only relationships explicitly stated in the text
    - source and target must be entities from the provided entity list
    - description should concisely describe the relationship
    - strength is an integer 5–10 based on degree of connection
      * 10: Direct creation/subordination (author-work, inventor-invention, parent-subsidiary)
      * 9: Alternative names of the same entity
      * 8: Closely related (close partners, family members)
      * 7: Clear but indirect (role in a work, member of an organization)
      * 6: Indirect association with clear link (colleagues, similar products)
      * 5: Loose association (same domain different concepts)

    ## Steps
    1. Analyze the text to identify explicit relationships
    2. Avoid speculation; only extract what the text states
    3. For each relationship, determine:
       - source: title of the source entity (must exist in the list)
       - target: title of the target entity (must exist in the list)
       - description: concise English description
       - strength: integer from 5 to 10
    4. Check directionality:
       - If the relationship is bidirectional, consider adding the reverse
       - If it is unidirectional, keep single direction
    5. Validate consistency and reasonableness
    6. Output as a JSON array

    ## Example
    [Input]
    Entities: [
      {"title": "Pride and Prejudice", "type": "Work", "description": "Novel by Jane Austen"},
      {"title": "Jane Austen", "type": "Person", "description": "English novelist"}
    ]
    Text: Pride and Prejudice was written by Jane Austen.

    [Output]
    [
      {"source": "Jane Austen", "target": "Pride and Prejudice", "description": "Author wrote the novel", "strength": 10}
    ]
 

# Knowledge base configuration
knowledge_base:
  chunk_size: 512
  chunk_overlap: 50
  split_markers: ["\n\n", "\n", "。"]
  image_processing:
    enable_multimodal: true
